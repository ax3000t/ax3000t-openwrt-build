#
# 小米AX3000T OpenWrt自动编译
# 
name: Build OpenWrt for Xiaomi AX3000T

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: 0 8 * * 5
  watch:
    types: started

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ax3000t.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆OpenWrt源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载自定义feeds配置
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载依赖包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        
        # 检查编译结果
        if [ -d "bin/targets" ]; then
          echo "编译成功！"
          echo "::set-output name=status::success"
          find bin/targets -name "*.bin" -o -name "*.img" -o -name "*.tar.gz" | head -10
        else
          echo "编译失败：未生成bin/targets目录"
          echo "::set-output name=status::failure"
          exit 1
        fi
        
        # 设置设备名和时间戳
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 调试编译结果
      if: (!cancelled())
      run: |
        echo "=== 检查编译输出 ==="
        ls -la openwrt/ || echo "openwrt目录不存在"
        ls -la openwrt/bin/ || echo "bin目录不存在"
        ls -la openwrt/bin/targets/ || echo "targets目录不存在"
        find openwrt/bin/targets -name "*.bin" -o -name "*.ubi" -o -name "*.img" 2>/dev/null || echo "未找到固件文件"
        echo "=== 检查配置 ==="
        grep "CONFIG_TARGET" openwrt/.config || echo "未找到target配置"

    - name: 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets
        if [ -d "mediatek/filogic" ]; then
          cd mediatek/filogic
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"
          echo "固件编译成功，位置：$PWD"
          ls -la
        else
          echo "编译失败：未找到固件目录"
          echo "可用的目录结构："
          find openwrt/bin -type d 2>/dev/null || echo "bin目录不存在"
          echo "::set-output name=status::failed"
        fi

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo "🎉 小米AX3000T OpenWrt固件编译完成" >> release.txt
        echo "📅 编译时间: $(date +"%Y年%m月%d日 %H:%M")" >> release.txt
        echo "🔧 固件版本: OpenWrt 24.10" >> release.txt
        echo "📦 包含功能: 基础路由功能 + IPSec VPN + KMS + AdGuard Home" >> release.txt
        echo "::set-output name=status::success"

    - name: 上传固件到发布
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 删除旧发布
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
