name: Build OpenWrt 24.10 for Xiaomi AX3000T

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: 0 8 * * 5

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: 释放磁盘空间
      run: |
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc || true
        sudo docker image prune -a -f || true
        sudo apt-get autoremove -y || true
        sudo apt-get autoclean || true

    - name: 初始化编译环境
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ccache ecj fastjar file g++ gawk \
        gettext git java-propose-classpath libelf-dev libncurses5-dev \
        libncursesw5-dev libssl-dev python3 unzip wget \
        python3-setuptools python3-dev rsync subversion \
        swig time xsltproc zlib1g-dev clang flex bison \
        gcc-multilib g++-multilib curl cmake ninja-build meson \
        libtool autoconf automake pkg-config
        sudo timedatectl set-timezone "$TZ"
        echo "编译环境初始化完成"
        df -h

    - name: 克隆OpenWrt源码
      run: |
        echo "开始克隆OpenWrt源码..."
        git clone $REPO_URL -b $REPO_BRANCH openwrt --depth=1
        cd openwrt
        echo "添加第三方软件源..."
        echo 'src-git kenzo https://github.com/kenzok8/openwrt-packages' >> feeds.conf.default
        echo 'src-git small https://github.com/kenzok8/small' >> feeds.conf.default
        echo "OpenWrt源码克隆完成"

    - name: 更新和安装feeds
      run: |
        cd openwrt
        echo "更新feeds..."
        ./scripts/feeds update -a
        echo "安装feeds..."
        ./scripts/feeds install -a
        echo "Feeds安装完成"

    - name: 生成配置文件
      run: |
        cd openwrt
        echo "生成设备配置..."
        cat > .config << 'EOF'
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-ax3000t-ubootmod=y
        
        # 基础系统
        CONFIG_PACKAGE_base-files=y
        CONFIG_PACKAGE_busybox=y
        CONFIG_PACKAGE_ca-bundle=y
        CONFIG_PACKAGE_dnsmasq-full=y
        CONFIG_PACKAGE_dropbear=y
        CONFIG_PACKAGE_firewall4=y
        CONFIG_PACKAGE_nftables=y
        CONFIG_PACKAGE_odhcp6c=y
        CONFIG_PACKAGE_odhcpd-ipv6only=y
        CONFIG_PACKAGE_ppp=y
        CONFIG_PACKAGE_ppp-mod-pppoe=y
        CONFIG_PACKAGE_procd=y
        CONFIG_PACKAGE_procd-ujail=y
        CONFIG_PACKAGE_opkg=y
        
        # 网络功能
        CONFIG_PACKAGE_ip-full=y
        CONFIG_PACKAGE_ipset=y
        CONFIG_PACKAGE_iptables=y
        CONFIG_PACKAGE_iptables-mod-conntrack-extra=y
        CONFIG_PACKAGE_kmod-nf-nathelper=y
        CONFIG_PACKAGE_kmod-ipt-nat=y
        
        # 无线相关
        CONFIG_PACKAGE_hostapd-common=y
        CONFIG_PACKAGE_wpad-wolfssl=y
        CONFIG_PACKAGE_kmod-cfg80211=y
        CONFIG_PACKAGE_kmod-mac80211=y
        CONFIG_PACKAGE_kmod-mt7915e=y
        CONFIG_PACKAGE_kmod-mt7981-firmware=y
        
        # IPSec VPN
        CONFIG_PACKAGE_strongswan=y
        CONFIG_PACKAGE_strongswan-charon=y
        CONFIG_PACKAGE_strongswan-ipsec=y
        CONFIG_PACKAGE_strongswan-minimal=y
        CONFIG_PACKAGE_strongswan-mod-aes=y
        CONFIG_PACKAGE_strongswan-mod-kernel-netlink=y
        CONFIG_PACKAGE_strongswan-mod-socket-default=y
        CONFIG_PACKAGE_kmod-ipsec=y
        
        # KMS服务
        CONFIG_PACKAGE_vlmcsd=y
        
        # AdGuard Home
        CONFIG_PACKAGE_adguardhome=y
        
        # Web管理界面
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-base=y
        CONFIG_PACKAGE_luci-mod-admin-full=y
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        CONFIG_PACKAGE_luci-app-firewall=y
        CONFIG_PACKAGE_luci-app-opkg=y
        
        # 实用工具
        CONFIG_PACKAGE_curl=y
        CONFIG_PACKAGE_wget-ssl=y
        CONFIG_PACKAGE_nano=y
        CONFIG_PACKAGE_htop=y
        
        # 移除不需要的包
        # CONFIG_PACKAGE_dnsmasq is not set
        CONFIG_PACKAGE_wpad-basic-wolfssl=n
        EOF
        
        echo "配置文件生成完成"

    - name: 自定义设置
      run: |
        cd openwrt
        echo "应用自定义设置..."
        # 修改默认IP为10.0.0.1  
        sed -i 's/192.168.1.1/10.0.0.1/g' package/base-files/files/bin/config_generate
        # 修改主机名
        sed -i 's/OpenWrt/Xiaomi-AX3000T/g' package/base-files/files/bin/config_generate
        # 设置root密码为空
        sed -i 's|root:.*|root::0:0:99999:7:::|g' package/base-files/files/etc/shadow || true
        echo "自定义设置完成"

    - name: 下载依赖包
      run: |
        cd openwrt
        echo "生成默认配置..."
        make defconfig
        echo "开始下载依赖包..."
        make download -j8 V=s
        # 检查下载结果
        find dl -size -1024c -exec ls -l {} \; || true
        find dl -size -1024c -exec rm -f {} \; || true
        echo "依赖包下载完成"

    - name: 编译固件
      run: |
        cd openwrt
        echo "开始编译固件，使用 $(nproc) 线程"
        echo "编译开始时间: $(date)"
        
        # 首先尝试多线程编译
        if ! make -j$(nproc) V=s; then
          echo "多线程编译失败，尝试单线程编译..."
          make -j1 V=s
        fi
        
        echo "编译完成时间: $(date)"
        
        # 检查编译结果
        if [ -d "bin/targets/mediatek/filogic" ]; then
          echo "✅ 编译成功！"
          ls -la bin/targets/mediatek/filogic/
          echo "COMPILE_SUCCESS=true" >> $GITHUB_ENV
        else
          echo "❌ 编译失败"
          echo "查看可用的target目录:"
          find bin/targets -type d 2>/dev/null || echo "未找到targets目录"
          exit 1
        fi

    - name: 整理固件文件
      if: env.COMPILE_SUCCESS == 'true'
      run: |
        cd openwrt/bin/targets/mediatek/filogic
        echo "整理固件文件..."
        
        # 删除packages目录
        rm -rf packages
        
        # 设置固件路径环境变量
        echo "FIRMWARE_PATH=$(pwd)" >> $GITHUB_ENV
        
        # 重命名文件使其更易识别
        for file in *xiaomi*.bin *xiaomi*.img; do
          if [ -f "$file" ]; then
            newname=$(echo "$file" | sed 's/openwrt-/AX3000T-OpenWrt-24.10-/')
            mv "$file" "$newname"
            echo "重命名: $file -> $newname"
          fi
        done
        
        echo "固件文件列表:"
        ls -la
        
        # 计算文件大小和MD5
        echo "文件详情:"
        for file in *.bin *.img; do
          if [ -f "$file" ]; then
            echo "文件: $file"
            echo "大小: $(ls -lh "$file" | awk '{print $5}')"
            echo "MD5: $(md5sum "$file" | awk '{print $1}')"
            echo "---"
          fi
        done

    - name: 创建发布
      if: env.COMPILE_SUCCESS == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v$(date +'%Y.%m.%d-%H%M')"
        name: "小米AX3000T OpenWrt 24.10 - $(date +'%Y.%m.%d')"
        body: |
          🎉 **小米AX3000T OpenWrt 24.10 自定义固件**
          
          📅 **编译时间**: $(date +'%Y年%m月%d日 %H:%M')  
          🔧 **固件版本**: OpenWrt 24.10  
          🏠 **默认地址**: http://10.0.0.1  
          👤 **默认用户**: root (无密码)  
          
          📦 **包含功能**:
          - ✅ 基础路由功能 (防火墙、NAT、DHCP、PPPoE等)
          - ✅ IPSec VPN 服务器 (strongSwan)
          - ✅ KMS 激活服务 (vlmcsd)
          - ✅ AdGuard Home 广告拦截
          - ✅ LuCI Web 管理界面
          - ✅ Wi-Fi 6 支持 (2.4G + 5G双频)
          
          💡 **使用说明**:
          1. 刷入固件后访问 http://10.0.0.1
          2. 用户名: root，密码为空
          3. 首次登录后请设置管理员密码
          4. 配置无线网络和其他功能
          
          🔧 **服务说明**:
          - **KMS服务**: 端口1688，支持Windows/Office激活
          - **AdGuard Home**: 端口3000，需要初始配置
          - **IPSec VPN**: 需要配置证书和用户认证
          
          ⚠️ **重要提示**:
          - 适用于小米AX3000T v1 (RD03/RD23)
          - 刷机有风险，请提前备份原厂固件
          - 需要先刷入U-Boot才能使用此固件
          - 请确保设备型号完全匹配
          
          📋 **刷机步骤**:
          1. 确认设备版本为AX3000T v1
          2. 先按教程刷入自定义U-Boot
          3. 再刷入此OpenWrt固件
          4. 重启后访问 http://10.0.0.1 配置
        files: ${{ env.FIRMWARE_PATH }}/*
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 编译总结
      if: always()
      run: |
        echo "==================== 编译总结 ===================="
        echo "编译结果: ${{ env.COMPILE_SUCCESS == 'true' && '✅ 成功' || '❌ 失败' }}"
        echo "编译时间: $(date)"
        echo "磁盘使用情况:"
        df -h
        if [ "${{ env.COMPILE_SUCCESS }}" == "true" ]; then
          echo "固件位置: ${{ env.FIRMWARE_PATH }}"
          echo "🎉 固件编译成功！请在Releases中下载使用。"
        else
          echo "😞 编译失败，请查看上面的错误信息。"
        fi
        echo "=================================================="
